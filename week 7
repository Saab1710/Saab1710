{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Saab1710/Saab1710/blob/main/week%207\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exercise (1)\n",
        "\n",
        "# Define a string variable\n",
        "course = 'Python for Beginners'\n",
        "\n",
        "# Convert all characters in the string to uppercase\n",
        "print(course.upper())\n",
        "\n",
        "# Find the index of the first occurrence of 'y' (case-sensitive)\n",
        "print(course.find('y'))\n",
        "\n",
        "# Find the index of the first occurrence of 'Y' (case-sensitive)\n",
        "print(course.find('Y'))\n",
        "\n",
        "# Replace the word 'for' with '4' in the string\n",
        "print(course.replace('for', '4'))\n",
        "\n",
        "# Perform arithmetic operations\n",
        "print(3 + 10)   # Addition: 3 + 10 = 13\n",
        "print(3 * 10)   # Multiplication: 3 * 10 = 30\n",
        "print(30 / 10)  # Division (returns a float): 30 / 10 = 3.0\n",
        "print(30 // 10) # Floor division (returns an integer): 30 // 10 = 3\n",
        "print(3 ** 2)   # Exponentiation: 3^2 = 9\n",
        "\n",
        "# Assignment operators with arithmetic operations\n",
        "x = 10\n",
        "x += 3  # Equivalent to x = x + 3\n",
        "print(x)  # Output: 13\n",
        "\n",
        "y = 10\n",
        "y *= 3  # Equivalent to y = y * 3\n",
        "print(y)  # Output: 30\n",
        "\n",
        "z = 10\n",
        "z -= 3  # Equivalent to z = z - 3\n",
        "print(z)  # Output: 7\n",
        "\n",
        "# Demonstrating operator precedence\n",
        "j = (10 + 3) * 2  # Parentheses first, then multiplication\n",
        "print(j)  # Output: 26\n",
        "\n",
        "# Comparison operations\n",
        "w = 3 > 4  # Checks if 3 is greater than 2 (True)\n",
        "print(w)\n",
        "\n",
        "e = 3 == 3  # Checks if 3 is equal to 2 (False)\n",
        "print(e)\n",
        "\n",
        "e = 3 != 3 # Checks if 3 is not equal to 2 (True)\n",
        "print(e)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "22aPn7eGMDai",
        "outputId": "5003d4e5-1e9e-4d8f-b3cf-79606b404a94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PYTHON FOR BEGINNERS\n",
            "1\n",
            "-1\n",
            "Python 4 Beginners\n",
            "13\n",
            "30\n",
            "3.0\n",
            "3\n",
            "9\n",
            "13\n",
            "30\n",
            "7\n",
            "26\n",
            "False\n",
            "True\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exercise (2)\n",
        "\n",
        "# Logical AND operation\n",
        "price = 567\n",
        "print(price > 10 and price < 30)\n",
        "# True: Both conditions (price > 10 and price < 30) are True\n",
        "\n",
        "# Logical OR operation\n",
        "price = 50\n",
        "print(price > 10 or price < 30)\n",
        "# True: At least one condition is True (price < 30 is True)\n",
        "\n",
        "# Logical NOT operation\n",
        "p = 1001000\n",
        "print(p )\n",
        "print(not p > 15)\n",
        "# True: price > 10 is False, and 'not' reverses it to True\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ktdgb8qoLo_B",
        "outputId": "e4d92a7b-27a9-4e78-8c47-74517047d5a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "True\n",
            "1001000\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exercise (3)\n",
        "\n",
        "# List initialization\n",
        "fi = [1, 2, 3, 500, 5, 8, 4, 7, 400]\n",
        "print(fi)  # Prints the entire list fi\n",
        "print(fi[3])  # Prints the first element of the list fi (index 0)\n",
        "\n",
        "# Second list initialization\n",
        "si = [90, 90, 390, 190]\n",
        "print(fi + si)  # Concatenates and prints both lists fi and si\n",
        "\n",
        "# Adding an element to the end of the list\n",
        "fi.append(54)\n",
        "print(fi)  # Prints the updated fi list after adding 100 to the end\n",
        "\n",
        "# Removing the first occurrence of 4 from the list\n",
        "fi.remove(4)\n",
        "print(fi)  # Prints the updated fi list after removing the first 4\n",
        "\n",
        "# Deleting the element at index 5 from the list\n",
        "del(fi[5])\n",
        "print(fi)  # Prints the updated fi list after deleting the element at index 5\n",
        "\n",
        "# Creating a set with unique elements (no duplicates allowed)\n",
        "chars = {'My', 'book', 'is', 'BY RICHARD'}\n",
        "print(chars)  # Prints the set chars\n",
        "\n",
        "# Creating a list containing other lists (nested lists)\n",
        "nums = [fi, si, [6, 5, 7, 3, 2, 1]]\n",
        "print(nums)  # Prints the nums list, which contains nested lists\n",
        "\n",
        "# Another example of a nested list with fi, si, and a new list\n",
        "nums = [chars, fi, [140, 500]]\n",
        "nums1 = [chars, fi, [300, 100]]\n",
        "print(nums1)  # Prints the nums1 list, another nested list with similar structure\n",
        "\n",
        "# Accessing the first element of nums1 (which is a set)\n",
        "print(nums1[0])  # Prints the first element of nums1 (the set chars)\n",
        "\n",
        "# Printing the fi list again\n",
        "print(fi)  # Prints the fi list again, to show its latest state\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nTRZo4U9MUu4",
        "outputId": "764ef0e4-0354-4f46-cc85-64354d92884c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 500, 5, 8, 4, 7, 400]\n",
            "500\n",
            "[1, 2, 3, 500, 5, 8, 4, 7, 400, 90, 90, 390, 190]\n",
            "[1, 2, 3, 500, 5, 8, 4, 7, 400, 54]\n",
            "[1, 2, 3, 500, 5, 8, 7, 400, 54]\n",
            "[1, 2, 3, 500, 5, 7, 400, 54]\n",
            "{'is', 'My', 'BY RICHARD', 'book'}\n",
            "[[1, 2, 3, 500, 5, 7, 400, 54], [90, 90, 390, 190], [6, 5, 7, 3, 2, 1]]\n",
            "[{'is', 'My', 'BY RICHARD', 'book'}, [1, 2, 3, 500, 5, 7, 400, 54], [300, 100]]\n",
            "{'is', 'My', 'BY RICHARD', 'book'}\n",
            "[1, 2, 3, 500, 5, 7, 400, 54]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exercise (4)\n",
        "\n",
        "# Initialize the temperature variable\n",
        "temperature = 20\n",
        "\n",
        "# Check if the temperature is greater than 30\n",
        "if temperature > 23:\n",
        "    print(\"hot\")  # This block will execute if the temperature is greater than 30\n",
        "\n",
        "# Check if the temperature is greater than 20 (only if the first condition is false)\n",
        "elif temperature > 24:\n",
        "    print(\"It is a nice day\")  # This block will execute if the temperature is between 20 and 30\n",
        "\n",
        "# If neither of the above conditions is true (temperature <= 20)\n",
        "else:\n",
        "    print(\"cold\")  # This block will execute if the temperature is 20 or lower\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qBQq7wHCIQfr",
        "outputId": "a39151f5-0488-4505-e990-6ca7ccb87cfd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cold\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercise (*)\n",
        "# Initialize the variable oc\n",
        "oc = \"AUTO SHOP\"\n",
        "\n",
        "# Check if oc is equal to \"Auto Shop\"\n",
        "if oc == \"bANK\":\n",
        "    print(\"Welcome to the Auto Shop!\")  # This block will execute if oc is \"Auto Shop\"\n",
        "\n",
        "# Check if oc is equal to \"Bank\"\n",
        "elif oc == \"Bank\":\n",
        "    print(\"Welcome to the bank!\")  # This block will execute if oc is \"Bank\"\n",
        "\n",
        "# If none of the above conditions are true\n",
        "else:\n",
        "    print(\"Where are you?\")  # This block will execute if oc is neither \"Auto Shop\" nor \"Bank\"\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ROyyUjtWKEzp",
        "outputId": "3110c938-f630-47ae-bfe1-60b22bc97df1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Where are you?\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question:\n",
        "\n",
        "Write a program that converts weight between kilograms and pounds. The program should:\n",
        "\n",
        "Ask the user to input their weight (in either kilograms or pounds).\n",
        "Ask the user to specify the unit of the weight: either kilograms (K) or pounds (L).\n",
        "Convert the weight to the opposite unit:\n",
        "If the input is in kilograms, convert it to pounds.\n",
        "If the input is in pounds, convert it to kilograms.\n",
        "Output the converted weight along with the corresponding unit."
      ],
      "metadata": {
        "id": "nY51BYyANSA0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Exercise (5)\n",
        "\n",
        "# Ask the user to input their weight\n",
        "weight = int(input(\"Weight: \"))  # Convert the input to an integer and store it in 'weight'\n",
        "\n",
        "# Ask the user to specify the unit (kg or lbs)\n",
        "unit = input(\"(K)g or (L)bs: \")  # Store the unit input as 'unit'\n",
        "\n",
        "# Check if the unit is 'K' (kg)\n",
        "if unit.upper() == \"K\":  # Convert input to uppercase for case-insensitive comparison\n",
        "    # Convert kg to lbs (1 kg = 2.20462 lbs, or use the approximation 1 kg = 0.45 lbs)\n",
        "    converted = weight / 0.45\n",
        "    # Print the converted weight in pounds\n",
        "    print(\"Weight in Lbs: \" + str(converted))\n",
        "\n",
        "# If the unit is not 'K', it should be 'L' (lbs)\n",
        "else:\n",
        "    # Convert lbs to kg (1 lb = 0.45 kg)\n",
        "    converted = weight * 0.45\n",
        "    # Print the converted weight in kilograms\n",
        "    print(\"Weight in Kgs: \" + str(converted))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "FQZs-sGmPOtx",
        "outputId": "33442e36-365d-4c12-e714-8a6633bc1932"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-39-741da17262de>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Ask the user to input their weight\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mweight\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Weight: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Convert the input to an integer and store it in 'weight'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Ask the user to specify the unit (kg or lbs)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1175\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1176\u001b[0m             )\n\u001b[0;32m-> 1177\u001b[0;31m         return self._input_request(\n\u001b[0m\u001b[1;32m   1178\u001b[0m             \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1179\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"shell\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1217\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1218\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1219\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1220\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1221\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exercise (6)\n",
        "\n",
        "# Initialize the counter variable\n",
        "i = 0\n",
        "\n",
        "# Start a while loop that runs as long as i is less than or equal to 9\n",
        "while i <= 5:\n",
        "    # Increment i by 1 in each iteration\n",
        "    i = i + 1\n",
        "    # Print the current value of i (this will print numbers from 1 to 10)\n",
        "    print(i)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "diYEnMjXdn3o",
        "outputId": "7d8a6930-8bee-4935-ddad-ec61dd3e1216"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question:\n",
        "\n",
        "Write a program that prints a right-angled triangle pattern using asterisks (*). The program should:\n",
        "\n",
        "Use a while loop to print 10 lines.\n",
        "On each line, print a number of asterisks equal to the line number:\n",
        "The first line should have 1 asterisk.\n",
        "The second line should have 2 asterisks.\n",
        "Continue this pattern until the tenth line, which should have 10 asterisks."
      ],
      "metadata": {
        "id": "0tAHX_hsNn4v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Exercise (7)\n",
        "\n",
        "# Initialize the counter variable\n",
        "i = 6\n",
        "\n",
        "# Start a while loop that runs as long as i is less than or equal to 10\n",
        "while i <= 10:\n",
        "    # Print a number of '*' characters equal to the value of i\n",
        "    print(i * '*')  # This will print 1 '*' in the first iteration, 2 '*' in the second, and so on\n",
        "\n",
        "    # Increment i by 1 in each iteration\n",
        "    i = i + 1\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yz0OHRipiNfq",
        "outputId": "acd3baf4-fdb1-40f5-84d4-cc2922504a05"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "******\n",
            "*******\n",
            "********\n",
            "*********\n",
            "**********\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exercise (7)\n",
        "\n",
        "# Function to demonstrate printing pattern\n",
        "# def pypart(n):  # Uncomment this line if you want to make the code into a function\n",
        "\n",
        "# Number of rows\n",
        "n = 20\n",
        "\n",
        "# Outer loop to handle the number of rows (in this case, 10 rows)\n",
        "for i in range(0, n):\n",
        "    # Inner loop to handle the number of columns (changes according to the outer loop)\n",
        "    for j in range(0, i + 1):\n",
        "        # Printing stars on each row, with a space after each star\n",
        "        print(\"* \", end=\"\")\n",
        "\n",
        "    # Ending the line after each row\n",
        "    print(\"\\r\")  # Moves to the next line after printing all stars for the current row\n",
        "\n",
        "# Driver code - You can call the function to execute it\n",
        "# n = 10\n",
        "# pypart(n)  # This would be used if you want to use the function version\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oRqQI6vtQ_wv",
        "outputId": "0d34059b-3cf5-4b17-fbda-7ec431493193"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "* \r\n",
            "* * \r\n",
            "* * * \r\n",
            "* * * * \r\n",
            "* * * * * \r\n",
            "* * * * * * \r\n",
            "* * * * * * * \r\n",
            "* * * * * * * * \r\n",
            "* * * * * * * * * \r\n",
            "* * * * * * * * * * \r\n",
            "* * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * * \r\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exercise (7)\n",
        "\n",
        "# Function to print the full diamond pattern\n",
        "def diamond(n):\n",
        "    # Upper part of the diamond\n",
        "    for m in range(0, n):\n",
        "        for i in range(0, m + 1):\n",
        "            print(\"* \", end=\"\")  # Print stars in each row, increasing\n",
        "        print(\"\\r\")  # Move to the next line after each row\n",
        "\n",
        "    # Lower part of the diamond\n",
        "    for m in range(n - 2, -1, -1):  # Start from n-2 to 0 to form the lower part\n",
        "        for i in range(0, m + 2):\n",
        "            print(\"* \", end=\"\")  # Print stars in each row, decreasing\n",
        "        print(\"\\r\")  # Move to the next line after each row\n",
        "\n",
        "# Driver code\n",
        "n = 10  # Number of rows for the upper part of the diamond\n",
        "diamond(n)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aRUEN2iugaEB",
        "outputId": "fb701cbd-ec3a-4edc-eee5-40b8494d26e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "* \r\n",
            "* * \r\n",
            "* * * \r\n",
            "* * * * \r\n",
            "* * * * * \r\n",
            "* * * * * * \r\n",
            "* * * * * * * \r\n",
            "* * * * * * * * \r\n",
            "* * * * * * * * * \r\n",
            "* * * * * * * * * * \r\n",
            "* * * * * * * * * * \r\n",
            "* * * * * * * * * \r\n",
            "* * * * * * * * \r\n",
            "* * * * * * * \r\n",
            "* * * * * * \r\n",
            "* * * * * \r\n",
            "* * * * \r\n",
            "* * * \r\n",
            "* * \r\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exercise (7)\n",
        "\n",
        "# Initialize n for the number of rows\n",
        "n = 30\n",
        "\n",
        "# Outer loop to handle the number of rows\n",
        "for m in range(0, n):\n",
        "    # Inner loop to handle the number of columns\n",
        "    # The number of columns increases as the outer loop progresses\n",
        "    for i in range(0, m + 1):\n",
        "        # Print a star, end=\" \" ensures stars are printed on the same line\n",
        "        print(\"* \", end=\"\")\n",
        "\n",
        "    # Move to the next line after each row\n",
        "    print(\"\\r\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1ORryImjhFoP",
        "outputId": "aae68735-1501-4d7b-9c6f-283470cec5d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "* \r\n",
            "* * \r\n",
            "* * * \r\n",
            "* * * * \r\n",
            "* * * * * \r\n",
            "* * * * * * \r\n",
            "* * * * * * * \r\n",
            "* * * * * * * * \r\n",
            "* * * * * * * * * \r\n",
            "* * * * * * * * * * \r\n",
            "* * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * \r\n",
            "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \r\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exercise (8)\n",
        "\n",
        "# List of names\n",
        "names = [\"DAVE \", \"alan\", \"John\", \"Steve\"]\n",
        "\n",
        "# Print the last name in the list using negative indexing\n",
        "print(names[-1])  # Output: \"Roze\"\n",
        "\n",
        "# Print the second name in the list using positive indexing\n",
        "print(names[1])  # Output: \"Nazi\"\n",
        "\n",
        "# Print the entire list\n",
        "print(names)  # Output: ['Mary', 'Nazi', 'Sami', 'Roze']\n",
        "\n",
        "# List of numbers\n",
        "numbers = [1, 2, 3, 4, 5]\n",
        "\n",
        "# Insert -1 at the beginning of the list (index 0)\n",
        "numbers.insert(0, -1)\n",
        "print(numbers)  # Output: [-1, 1, 2, 3, 4, 5]\n",
        "\n",
        "# Remove the number 3 from the list\n",
        "numbers = [1, 2, 3, 4, 5]  # Reset list for clarity\n",
        "numbers.remove(3)\n",
        "print(numbers)  # Output: [1, 2, 4, 5]\n",
        "\n",
        "# Clear the entire list, removing all elements\n",
        "numbers.clear()\n",
        "print(numbers)  # Output: []\n",
        "\n",
        "# List of numbers\n",
        "numbers = [1, 2, 3, 4, 5]\n",
        "\n",
        "# Check if 1 is in the list (returns True if found)\n",
        "print(1 in numbers)  # Output: True\n",
        "\n",
        "# Check if 10 is in the list (returns False if not found)\n",
        "print(10 in numbers)  # Output: False\n",
        "\n",
        "# Print the length of the list (how many items it contains)\n",
        "print(len(numbers))  # Output: 5\n",
        "\n",
        "# Using range to iterate over a sequence of numbers (0 to 4)\n",
        "numbers = [1, 2, 3, 4, 5, 6]\n",
        "numbers = range(5)  # range(5) creates a sequence of numbers from 0 to 4\n",
        "for number in numbers:\n",
        "    print(number)  # Output: 0 1 2 3 4\n",
        "\n",
        "print(\"******************\")\n",
        "\n",
        "# Using range to iterate over a sequence of numbers (5 to 9)\n",
        "numbers = range(5, 10)  # range(5, 10) creates a sequence from 5 to 9\n",
        "for number in numbers:\n",
        "    print(number)  # Output: 5 6 7 8 9\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aVk2ie4VoqHS",
        "outputId": "5d1a0fd9-88cf-4851-925d-ffc7c5930511"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Steve\n",
            "alan\n",
            "['DAVE ', 'alan', 'John', 'Steve']\n",
            "[-1, 1, 2, 3, 4, 5]\n",
            "[1, 2, 4, 5]\n",
            "[]\n",
            "True\n",
            "False\n",
            "5\n",
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "******************\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "These exercises cover basic concepts like lists, strings, loops, arithmetic, functions, and conditional statements."
      ],
      "metadata": {
        "id": "AV-KwV7gPY1o"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exercise 1: List Basics"
      ],
      "metadata": {
        "id": "tiaEwdWgOpQk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Create a list of 5 numbers\n",
        "numbers = [5, 10, 15, 20, 25]\n",
        "\n",
        "# 2. Print the first and last elements of the list\n",
        "print(\"First element:\", numbers[0])\n",
        "print(\"Last element:\", numbers[-4])\n",
        "\n",
        "# 3. Change the second element of the list to 10\n",
        "numbers[1] = 10\n",
        "\n",
        "# 4. Add a new number at the end of the list\n",
        "numbers.append(30)\n",
        "\n",
        "# 5. Remove the third element from the list\n",
        "numbers.pop(2)\n",
        "\n",
        "# 6. Print the updated list\n",
        "print(\"Updated list:\", numbers)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P0iK7rL7OiWu",
        "outputId": "32d371e5-9f4f-4ec6-fae2-4eb5e698d7cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First element: 5\n",
            "Last element: 10\n",
            "Updated list: [5, 10, 20, 25, 30]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exercise 2: String Manipulation"
      ],
      "metadata": {
        "id": "2VD8YAXFOsId"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Create a string variable with your name\n",
        "name = \"Richard O'Connell\"\n",
        "\n",
        "# 2. Print the string in uppercase\n",
        "print(name.upper())\n",
        "\n",
        "# 3. Print the string in lowercase\n",
        "print(name.lower())\n",
        "\n",
        "# 4. Print the length of the string\n",
        "print(\"Length of name:\", len(name))\n",
        "\n",
        "# 5. Print the first and last characters of the string\n",
        "print(\"First character:\", name[0])\n",
        "print(\"Last character:\", name[-1])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9hnAq8kkOuc3",
        "outputId": "1c09fa6c-7eef-4680-998a-6cbaa072e708"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RICHARD O'CONNELL\n",
            "richard o'connell\n",
            "Length of name: 17\n",
            "First character: R\n",
            "Last character: l\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exercise 3: Simple Arithmetic"
      ],
      "metadata": {
        "id": "rRb_gOe5Ox-R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Add two numbers together\n",
        "a = 34\n",
        "b = 16\n",
        "print(\"Sum:\", a + b)\n",
        "\n",
        "# 2. Subtract two numbers\n",
        "print(\"Difference:\", a - b)\n",
        "\n",
        "# 3. Multiply two numbers\n",
        "print(\"Product:\", a * b)\n",
        "\n",
        "# 4. Divide two numbers and print the result\n",
        "print(\"Division:\", a / b)\n",
        "\n",
        "# 5. Calculate the square of a number\n",
        "print(\"Square of\", a, \":\", a ** 2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GHT-lAOUO0Tg",
        "outputId": "1748ee3a-0b82-4fa3-bef8-650fdadb8ada"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sum: 50\n",
            "Difference: 18\n",
            "Product: 544\n",
            "Division: 2.125\n",
            "Square of 34 : 1156\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exercise 4: Looping with range()"
      ],
      "metadata": {
        "id": "VVzJtYO1O7rM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Use a for loop to print numbers from 1 to 5\n",
        "for i in range(1, 7):\n",
        "    print(i)\n",
        "\n",
        "# 2. Use a while loop to print numbers from 5 to 1 in reverse order\n",
        "i = 5\n",
        "while i >= 1:\n",
        "    print(i)\n",
        "    i -= 1\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "13NxJCSJO-E1",
        "outputId": "13743928-7334-451c-c0fc-6d9a38a2e49a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "5\n",
            "4\n",
            "3\n",
            "2\n",
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exercise 5: Conditional Statements"
      ],
      "metadata": {
        "id": "tB88sHbBPCdQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Check if a number is even or odd\n",
        "number = 7\n",
        "if number % 2 == 0:\n",
        "    print(f\"{number} is even.\")\n",
        "else:\n",
        "    print(f\"{number} is odd.\")\n",
        "\n",
        "# 2. Check if a number is positive, negative, or zero\n",
        "num = 12\n",
        "if num > 0:\n",
        "    print(f\"{num} is positive.\")\n",
        "elif num < 0:\n",
        "    print(f\"{num} is negative.\")\n",
        "else:\n",
        "    print(f\"{num} is zero.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A1wXDx5pPEbP",
        "outputId": "52e4a346-ab55-4682-8fa2-e0ebb0cbb125"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7 is odd.\n",
            "12 is positive.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exercise 6: Functions"
      ],
      "metadata": {
        "id": "0RPJys21PJes"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Function that takes two numbers as input and returns their sum\n",
        "def add_numbers(x, y):\n",
        "    return x + y\n",
        "\n",
        "print(\"Sum:\", add_numbers(54, 25))\n",
        "\n",
        "# 2. Function that checks if a number is divisible by 5\n",
        "def is_divisible_by_5(n):\n",
        "    if n % 5 == 0:\n",
        "        return True\n",
        "    else:\n",
        "        return False\n",
        "\n",
        "print(\"Is 25 divisible by 5?\", is_divisible_by_5(25))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j8ryMaTaPL56",
        "outputId": "d75790b2-137a-4a7c-8f91-bf2488c7a79c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sum: 79\n",
            "Is 25 divisible by 5? True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exercise 7: Lists and Loops"
      ],
      "metadata": {
        "id": "uIdwKl5-PQbk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Create a list of 5 fruits\n",
        "f = [\"Pear\", \"Apple\", \"Grapefruit\", \"Strawberries\"]\n",
        "\n",
        "# 2. Use a for loop to print each fruit in the list\n",
        "for fruit in f:\n",
        "    print(fruit)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OJ-nkMEnPSLV",
        "outputId": "6ffc1118-6f84-4bb3-df87-8a93f6932441"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pear\n",
            "Apple\n",
            "Grapefruit\n",
            "Strawberries\n"
          ]
        }
      ]
    }
  ]
}